<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('User', 'base');

/**
 * Table_User
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id_user
 * @property string $hash
 * @property timestamp $archived_at
 * @property string  $role
 * @property string  $email
 * @property string  $name
 * @property string  $surname
 * @property string  $description
 * @property string  $testing_systems
 * @property string  $reporting_systems
 * @property boolean $knowledge_of_selenium
 * @property string  $ide_environment
 * @property string  $programming_languages
 * @property boolean $knowledge_of_mysql
 * @property string  $pm_methodologies
 * @property string  $pm_reports_systems
 * @property boolean $knowledge_of_scrum
 * @property integer $id_service
 * 
 * @method integer getId()
 * @method boolean isNew()
 * @method static User find($id, $tableName = null)
 * @method static User findOneBy*
 * @static Doctrine_Collection findBy*
 * 
 * @method static getIdUserById() getIdUserById($id)
 * @method getIdUser() getIdUser()
 * @method setIdUser() setIdUser($value)
 * @method static getHashById() getHashById($id)
 * @method getHash() getHash()
 * @method setHash() setHash($value)
 * @method static getArchivedAtById() getArchivedAtById($id)
 * @method getArchivedAt() getArchivedAt()
 * @method setArchivedAt() setArchivedAt($value)
 * @method static getRoleById() getRoleById($id)
 * @method getRole() getRole()
 * @method setRole() setRole($value)
 * @method static getEmailById() getEmailById($id)
 * @method getEmail() getEmail()
 * @method setEmail() setEmail($value)
 * @method static getNameById() getNameById($id)
 * @method getName() getName()
 * @method setName() setName($value)
 * @method static getSurnameById() getSurnameById($id)
 * @method getSurname() getSurname()
 * @method setSurname() setSurname($value)
 * @method static getDescriptionById() getDescriptionById($id)
 * @method getDescription() getDescription()
 * @method setDescription() setDescription($value)
 * @method static getTestingSystemsById() getTestingSystemsById($id)
 * @method getTestingSystems() getTestingSystems()
 * @method setTestingSystems() setTestingSystems($value)
 * @method static getReportingSystemsById() getReportingSystemsById($id)
 * @method getReportingSystems() getReportingSystems()
 * @method setReportingSystems() setReportingSystems($value)
 * @method static getKnowledgeOfSeleniumById() getKnowledgeOfSeleniumById($id)
 * @method getKnowledgeOfSelenium() getKnowledgeOfSelenium()
 * @method setKnowledgeOfSelenium() setKnowledgeOfSelenium($value)
 * @method static getIdeEnvironmentById() getIdeEnvironmentById($id)
 * @method getIdeEnvironment() getIdeEnvironment()
 * @method setIdeEnvironment() setIdeEnvironment($value)
 * @method static getProgrammingLanguagesById() getProgrammingLanguagesById($id)
 * @method getProgrammingLanguages() getProgrammingLanguages()
 * @method setProgrammingLanguages() setProgrammingLanguages($value)
 * @method static getKnowledgeOfMysqlById() getKnowledgeOfMysqlById($id)
 * @method getKnowledgeOfMysql() getKnowledgeOfMysql()
 * @method setKnowledgeOfMysql() setKnowledgeOfMysql($value)
 * @method static getPmMethodologiesById() getPmMethodologiesById($id)
 * @method getPmMethodologies() getPmMethodologies()
 * @method setPmMethodologies() setPmMethodologies($value)
 * @method static getPmReportsSystemsById() getPmReportsSystemsById($id)
 * @method getPmReportsSystems() getPmReportsSystems()
 * @method setPmReportsSystems() setPmReportsSystems($value)
 * @method static getKnowledgeOfScrumById() getKnowledgeOfScrumById($id)
 * @method getKnowledgeOfScrum() getKnowledgeOfScrum()
 * @method setKnowledgeOfScrum() setKnowledgeOfScrum($value)
 * @method static getIdServiceById() getIdServiceById($id)
 * @method getIdService() getIdService()
 * @method setIdService() setIdService($value)
 * 
 * @property Doctrine_Collection $Layouts
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class Table_User extends Base_Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('user');
        $this->hasColumn('id_user', 'integer', null, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             'can_import' => true,
             ));
        $this->hasColumn('hash', 'string', 32, array(
             'type' => 'string',
             'size' => 32,
             'log' => false,
             'length' => 32,
             'can_import' => true,
             ));
        $this->hasColumn('archived_at', 'timestamp', null, array(
             'type' => 'timestamp',
             'notnull' => false,
             'can_import' => true,
             ));
        $this->hasColumn('role', 'string ', 255, array(
             'type' => 'string ',
             'notnull' => true,
             'length' => '255',
             'can_import' => true,
             ));
        $this->hasColumn('email', 'string ', 255, array(
             'type' => 'string ',
             'notnull' => true,
             'length' => '255',
             'can_import' => true,
             ));
        $this->hasColumn('name', 'string ', 255, array(
             'type' => 'string ',
             'notnull' => true,
             'length' => '255',
             'can_import' => true,
             ));
        $this->hasColumn('surname', 'string ', 255, array(
             'type' => 'string ',
             'notnull' => true,
             'length' => '255',
             'can_import' => true,
             ));
        $this->hasColumn('description', 'string ', 255, array(
             'type' => 'string ',
             'notnull' => false,
             'length' => '255',
             'can_import' => true,
             ));
        $this->hasColumn('testing_systems', 'string ', 255, array(
             'type' => 'string ',
             'notnull' => false,
             'length' => '255',
             'can_import' => true,
             ));
        $this->hasColumn('reporting_systems', 'string ', 255, array(
             'type' => 'string ',
             'notnull' => false,
             'length' => '255',
             'can_import' => true,
             ));
        $this->hasColumn('knowledge_of_selenium', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => false,
             'can_import' => true,
             ));
        $this->hasColumn('ide_environment', 'string ', 255, array(
             'type' => 'string ',
             'notnull' => false,
             'length' => '255',
             'can_import' => true,
             ));
        $this->hasColumn('programming_languages', 'string ', 255, array(
             'type' => 'string ',
             'notnull' => false,
             'length' => '255',
             'can_import' => true,
             ));
        $this->hasColumn('knowledge_of_mysql', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => false,
             'can_import' => true,
             ));
        $this->hasColumn('pm_methodologies', 'string ', 255, array(
             'type' => 'string ',
             'notnull' => false,
             'length' => '255',
             'can_import' => true,
             ));
        $this->hasColumn('pm_reports_systems', 'string ', 255, array(
             'type' => 'string ',
             'notnull' => false,
             'length' => '255',
             'can_import' => true,
             ));
        $this->hasColumn('knowledge_of_scrum', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => false,
             'can_import' => true,
             ));
        $this->hasColumn('id_service', 'integer', null, array(
             'type' => 'integer',
             'can_import' => false,
             'log' => false,
             ));

        $this->option('select', 'o.*, e.*');
        $this->option('search', 'CONCAT(o.name, o.surname, e.email)');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('Layout as Layouts', array(
             'local' => 'id_user',
             'foreign' => 'id_user'));

        $softdelete0 = new Doctrine_Template_SoftDelete();
        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($softdelete0);
        $this->actAs($timestampable0);
    }
}