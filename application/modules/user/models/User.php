<?php

/**
 * User
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class User extends Table_User
{
    protected static $_loadList = null;

    /**
     * @deprecated
     * @var null
     */
    protected static $_userArray = null;

    /**
     * @param array $options
     * @return Doctrine_Query
     */
    public static function getQuery($options = array())
    {
        $query = parent::getQuery($options);

        if ( isset($options['fullname']) ) {
            $query->addSelect('TRIM(CONCAT(o.name, " ", o.surname)) as fullname');
        }

        if ( isset( $options['email'] ) && !empty( $options['email'] ) ) {
            $query->addWhere('e.email LIKE ?', '%' . $options['email'] . '%');
        }

        $fieldsLikeCheck = array('phone');
        foreach ($fieldsLikeCheck as $field) {
            if ( isset($options[$field]) && !empty($options[$field]) ) {
                $query->addWhere('o.' . $field . ' LIKE ?', '%' . $options[$field] . '%');
            }
        }

        $fieldsEqualCheck = array('token', 'role');
        foreach ($fieldsEqualCheck as $field) {
            if ( isset($options[$field]) && !empty($options[$field]) ) {
                $query->addWhere('o.' . $field . ' = ?', $options[$field]);
            }
        }

        $fieldsDateRangeCheck = array('created_at');
        foreach ($fieldsDateRangeCheck as $field) {
            if ( isset($options[$field]) ) {
                if ( isset($options[$field]['min']) && $options[$field]['min'] ) {
                    $query->addWhere('o.' . $field . ' >= ?', $options[$field]['min']);
                }
                if ( isset($options[$field]['max']) && $options[$field]['max'] ) {
                    $query->addWhere('o.' . $field . ' <= ?', $options[$field]['max'].' 23:59:59');
                }
            }
        }

        return $query;
    }

    /**
     * @return string
     */
    public function getUserName()
    {
        return trim($this->getName().' '.$this->getSurname());
    }

    /**
     * @return false|UserEmail
     */
    public function getMainEmail()
    {
        return UserEmail::findMainEmailByIdUser($this->getId());
    }

    public function getRoles()
    {
        return Base_Auth::getUserRoles($this->role);
    }



    public static function getListArray($options = array())
    {
        $result = self::getList($options);
        $listOptions = array();
        foreach ($result as $row) {
            $listOptions[$row['id_user']] = $row['fullname'];
        }

        return $listOptions;
    }

    /**
     * @deprecated
     * @param $id_user
     * @return mixed
     */
    public static function getUserNameColumn($id_user)
    {
        if ( self::$_userArray === null ) {
            $result = self::getList(array('coll_key' => 'id_user'));
            foreach ($result as $key => $v) {
                self::$_userArray[$key] = array('fullname' => $v['name'].' '.$v['surname']);
            }
        }

        return isset(self::$_userArray[$id_user]) ? self::$_userArray[$id_user]['fullname'] : '';
    }

    public static function getFullnameById($id)
    {
        return self::getValueByCol($id, 'fullname');
    }


    public static function getValueByCol($id, $col)
    {
        $list = self::loadList();

        return isset($list[$id][$col]) ? $list[$id][$col] : '';
    }

    public static function loadList()
    {
        if ( null === self::$_loadList ) {
            self::$_loadList = self::getList(array('coll_key' => 'id_user', 'fullname' => '', 'archived_at' => '0'));
        }

        return self::$_loadList;
    }

    public static function getRecordByToken($token)
    {
        $record = self::getQuery(array('token' => $token))->fetchOne();
        return !empty($record) ? $record : null;
    }
}