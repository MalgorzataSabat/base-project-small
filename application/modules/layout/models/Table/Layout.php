<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Layout', 'base');

/**
 * Table_Layout
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id_layout
 * @property string  $type
 * @property integer $id_layout_template
 * @property integer $id_user
 * @property string  $name
 * @property string $data_map
 * @property boolean $is_default
 * @property boolean $is_public
 * @property integer $id_service
 * 
 * @method integer getId()
 * @method boolean isNew()
 * @method static Layout find($id, $tableName = null)
 * @method static Layout findOneBy*
 * @static Doctrine_Collection findBy*
 * 
 * @method static getIdLayoutById() getIdLayoutById($id)
 * @method getIdLayout() getIdLayout()
 * @method setIdLayout() setIdLayout($value)
 * @method static getTypeById() getTypeById($id)
 * @method getType() getType()
 * @method setType() setType($value)
 * @method static getIdLayoutTemplateById() getIdLayoutTemplateById($id)
 * @method getIdLayoutTemplate() getIdLayoutTemplate()
 * @method setIdLayoutTemplate() setIdLayoutTemplate($value)
 * @method static getIdUserById() getIdUserById($id)
 * @method getIdUser() getIdUser()
 * @method setIdUser() setIdUser($value)
 * @method static getNameById() getNameById($id)
 * @method getName() getName()
 * @method setName() setName($value)
 * @method static getDataMapById() getDataMapById($id)
 * @method getDataMap() getDataMap()
 * @method setDataMap() setDataMap($value)
 * @method static getIsDefaultById() getIsDefaultById($id)
 * @method getIsDefault() getIsDefault()
 * @method setIsDefault() setIsDefault($value)
 * @method static getIsPublicById() getIsPublicById($id)
 * @method getIsPublic() getIsPublic()
 * @method setIsPublic() setIsPublic($value)
 * @method static getIdServiceById() getIdServiceById($id)
 * @method getIdService() getIdService()
 * @method setIdService() setIdService($value)
 * 
 * @property User $User
 * @property LayoutTemplate $LayoutTemplate
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class Table_Layout extends Base_Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('layout');
        $this->hasColumn('id_layout', 'integer', null, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             'can_import' => true,
             ));
        $this->hasColumn('type', 'string ', 255, array(
             'type' => 'string ',
             'length' => '255',
             'can_import' => true,
             ));
        $this->hasColumn('id_layout_template', 'integer', null, array(
             'type' => 'integer',
             'can_import' => true,
             ));
        $this->hasColumn('id_user', 'integer', null, array(
             'type' => 'integer',
             'can_import' => true,
             ));
        $this->hasColumn('name', 'string ', 255, array(
             'type' => 'string ',
             'length' => '255',
             'can_import' => true,
             ));
        $this->hasColumn('data_map', 'string', null, array(
             'type' => 'string',
             'can_import' => true,
             ));
        $this->hasColumn('is_default', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             'can_import' => true,
             ));
        $this->hasColumn('is_public', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             'can_import' => true,
             ));
        $this->hasColumn('id_service', 'integer', null, array(
             'type' => 'integer',
             'can_import' => false,
             'log' => false,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('User', array(
             'local' => 'id_user',
             'foreign' => 'id_user',
             'onDelete' => 'CASCADE'));

        $this->hasOne('LayoutTemplate', array(
             'local' => 'id_layout_template',
             'foreign' => 'id_layout_template'));
    }
}