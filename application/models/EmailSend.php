<?php

/**
 * EmailSend
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class EmailSend extends Table_EmailSend
{
    /**
     * @var Base_Mail
     */
    private $_mail = null;
    

    public static function getQuery($options = array())
    {
        $query = parent::getQuery($options);

        $query->addOrderBy('o.created_at DESC');      
        
        $fieldsLikeCheck = array('from', 'to');
        foreach ($fieldsLikeCheck as $field) {
            if ( isset($options[$field]) && !empty($options[$field]) ) {
                $query->addWhere('o.' . $field . ' LIKE ?', '%' . $options[$field] . '%');
            }
        }

        $fieldsEqualCheck = array('id_email_send','is_sent','to_send');
        foreach ($fieldsEqualCheck as $field) {
            if ( isset($options[$field]) && strlen($options[$field]) > 0 ) {
                $query->addWhere('o.' . $field . ' = ?', $options[$field]);
            }
        }

        $fieldsDateRangeCheck = array('created_at','sent_time');
        foreach ($fieldsDateRangeCheck as $field) {
            if ( isset($options[$field]) ) {
                if ( isset($options[$field]['min']) && $options[$field]['min'] ) {
                    $query->addWhere('o.' . $field . ' >= ?', $options[$field]['min']);
                }
                if ( isset($options[$field]['max']) && $options[$field]['max'] ) {
                    $query->addWhere('o.' . $field . ' <= ?', $options[$field]['max'].' 23:59:59');
                }
            }
        }

        return $query;
    }


    /**
     * @return string
     */
    private static function generateFileName()
    {
        return date('Y-m') . '/' . uniqid();
    }

    /**
     * @param $filename
     * @return string
     */
    private static function getFullFileName($filename)
    {
        return APPLICATION_DATA . '/email_send/' . $filename . '.serialized';
    }


    public function getCc()
    {
        $baseMail = $this->getMail();
        $array = array();

        if($baseMail)
        {
            if(array_key_exists("Cc", $baseMail->getHeaders()))
            {
                $headers = $baseMail->getHeaders();
                foreach($headers['Cc'] as $key => $value)
                {
                    if($key === 'append') continue;
                    $array[] = $value;
                }
            }
        }

        return $array;
    }


    public function getBcc()
    {
        $baseMail = $this->getMail();
        $array = array();

        if($baseMail) {
            if (array_key_exists("Bcc", $baseMail->getHeaders()))
            {
                $headers = $baseMail->getHeaders();
                foreach ($headers['Bcc'] as $key => $value)
                {
                    if ($key === 'append') continue;
                    $array[] = $value;
                }
            }
        }
        return $array;
    }

    public function getHtml()
    {
        $baseMail = $this->getMail();

        if($baseMail)
        {
            return $baseMail->getBodyHtml()->getRawContent();
        }
        return '';
    }

    public function getText()
    {
        $baseMail = $this->getMail();

        if($baseMail)
        {
            return $baseMail->getBodyText()->getRawContent();
        }
        return '';
    }

    /**
     * @return Base_Mail|mixed
     * @throws Base_Exception
     */
    public function getMail()
    {
        if(null === $this->_mail){
            $fullFilename = self::getFullFileName($this->filename);

            if(file_exists($fullFilename)){
                $this->_mail = unserialize(file_get_contents($fullFilename));
            }
        }

        return $this->_mail;
    }

    /**
     * @param $mail Base_Mail
     * @return $this
     * @throws Base_Exception
     */
    public function setMail($mail)
    {
    	if (!($mail instanceof Base_Mail)) {
    		throw new Base_Exception('Mail is not Base_Mail object');
    	}

        $this->_mail = $mail;

        return $this;
    }
    
    public function preSave($event)
    {
    	parent::preSave($event);
    	
    	if ($this->isNew()) {
	    	$this->filename = self::generateFileName();
        	$fullFilename = self::getFullFileName($this->filename);
        	$dirname = dirname($fullFilename);
        	Base::createDir($dirname);
        	
        	if (!file_exists($dirname)) {
        		throw new Base_Exception(sprintf('Directory %s does not exist', $dirname));
        	}
        	
        	if (!is_writable($dirname)) {
        		throw new Base_Exception(sprintf('Directory %s is not writable', $dirname));
        	}
    
        	if ($this->_mail) {
        		if (!file_put_contents ($fullFilename, serialize($this->_mail))) {
        			throw new Base_Exception(sprintf('File %s is not writable', $fullFilename));
        		}
        	}
        }
    }

    public function postDelete($event)
    {
		$fullFilename = self::getFullFileName($this->filename);
    	
    	if (file_exists($fullFilename)) {
            unlink($fullFilename);
    	}

    	parent::postDelete($event);
    }
}