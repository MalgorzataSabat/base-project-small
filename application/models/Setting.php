<?php

/**
 * Setting
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Setting extends Table_Setting
{

    const EMAIL_CRON_ON = 'email.cron_on';

    const EMAIL_FROM = 'email.from';

    const EMAIL_NAME = 'email.name';

    const EMAIL_PASSWORD = 'email.password';

    const EMAIL_PORT = 'email.port';

    const EMAIL_SEND_ON = 'email.send_on';

    const EMAIL_SMTP_ON = 'email.smtp_on';

    const EMAIL_SSL = 'email.ssl';

    const EMAIL_TO = 'email.to';

    const EMAIL_TRANSPORTER = 'email.transporter';

    const EMAIL_USER = 'email.user';

    const EMAIL_CC = 'email.cc';

    const EMAIL_BCC = 'email.bcc';

    const DEFAULT_TEMPLATE = 'default';

    const DEFAULT_TEMPLATE_INFO = 'This is default frontend template.';

    const DEFAULT_TEMPLATE_IMAGE = '';

    const DEFAULT_BACKEND_TEMPLATE = 'default';

    const DEFAULT_BACKEND_TEMPLATE_INFO = 'This is default backend template.';

    const DEFAULT_BACKEND_TEMPLATE_IMAGE = '';

//    const SETTING_FORM_CLASS = 'form-class';

    /**
     * Setting list
     * @var array
     */
    private static $_setting = null;

    /**
     * Setting type
     * @var array
     */
    private static $_setting_types = null;

    /**
     * Get setting list fom database
     * @return array
     */
    public static function getSettings()
    {
        if ( empty(self::$_setting) ) {
            $result = Doctrine_Query::create()
                ->select('o.key, o.value')
                ->addWhere('o.id_service = ? OR o.id_service IS NULL', Base_Service::getId())
                ->from(__CLASS__.' o')
                ->orderBy('o.id_service ASC')
                ->execute(array(), Doctrine::HYDRATE_ARRAY);

            foreach($result as $v){
                self::$_setting[$v['key']] = $v['value'];
            }
        }

        return self::$_setting;
    }

    /**
     * Get setting type list from database
     * @return array
     */
    public static function getSettingTypes()
    {
        if(null === self::$_setting_types){
            $settings = self::getSettings();
            foreach($settings as $k => $v){
                $type = explode('.', $k);
                if(count($type)>1){
                    self::$_setting_types[$type[0]] = $type[0];
                }
            }
        }

        return self::$_setting_types;
    }


    /**
     * @param $key
     * @param null $default
     * @return null
     */
    public static function getSetting($key, $default = null)
    {
        $settings = self::getSettings();
        return isset($settings[$key]) ? $settings[$key] : $default;
    }

    public static function setSetting($key, $value)
    {
        Doctrine_Query::create()
            ->update('Setting s')
            ->set('s.value', '?', $value)
            ->where('s.key = ?', $key)
            ->execute()
            ;
    }


    /**
     * @return array
     */
    public static function getEmailSetting()
    {
        $settings = self::getSettings();

       $return = array(

            'send_on' => '1',
            'smtp_on' => '1',
            'transporter' => 'mail.risenet.pl',
            'username' => 'crm@risenet.pl',
            'password' => 'XclchKQ2',
            'ssl'=> '',
            'port'=> '587',
            'email_from' => 'malgorzata.sabat@risenet.pl',
            'email_to' =>  'gosiek0011@tlen.pl',
            'name_from' => 'Projekt M.S.',
            'cc' => array( 0 => ''),
            'bcc' => array(0 => ''),

        );

        return $return;
    }

    /**
     * @return array
     */
    public static function getTemplates()
    {
        $frontend_path = APPLICATION_PATH . DS . 'templates/frontend';
        $backend_path = APPLICATION_PATH . DS . 'templates/backend';

        $list_frontend = array();

        // set default frontend template
        $list_frontend[self::DEFAULT_TEMPLATE]['title'] = self::DEFAULT_TEMPLATE;
        $list_frontend[self::DEFAULT_TEMPLATE]['info'] = self::DEFAULT_TEMPLATE_INFO;
        $list_frontend[self::DEFAULT_TEMPLATE]['image'] = file_exists(self::DEFAULT_TEMPLATE_IMAGE) ? self::DEFAULT_TEMPLATE_IMAGE : null;

        // set other frontend template if exist
        if(file_exists($frontend_path)) {
            foreach (scandir($frontend_path) as $dir) {
                if ($dir[0] == '.') continue;
                $list_frontend[$dir]['title'] = $dir;

                // info about template
                if (file_exists($frontend_path . DS . $dir)) {
                    foreach (scandir($frontend_path . DS . $dir) as $file) {
                        if ($file[0] == '.') continue;

                        if ($file == 'info.txt') {
                            if (file_exists($filename = $frontend_path . DS . $dir . DS . $file)) {
                                $list_frontend[$dir]['info'] = file_get_contents($filename);
                            }
                        }
                    }
                }

                if (file_exists($public_frontend_path = ROOT_PATH . '/public/assets/frontend/' . $dir)) {
                    if (file_exists($image = $public_frontend_path . '/img/preview.jpg')) {
                        $list_frontend[$dir]['image'] = 'assets/frontend/' . $dir . '/img/preview.jpg';
                    }
                }
            }
        }

        $templates_list['frontend'] = $list_frontend;

        $list_backend = array();

        // set default backend template
        $list_backend[self::DEFAULT_BACKEND_TEMPLATE]['title'] = self::DEFAULT_BACKEND_TEMPLATE;
        $list_backend[self::DEFAULT_BACKEND_TEMPLATE]['info'] = self::DEFAULT_TEMPLATE_INFO;
        $list_backend[self::DEFAULT_BACKEND_TEMPLATE]['image'] = file_exists(self::DEFAULT_BACKEND_TEMPLATE_IMAGE) ? self::DEFAULT_BACKEND_TEMPLATE_IMAGE : null;

        // set other backend template if exist
        if(file_exists($backend_path)){
            foreach(scandir($backend_path) as $dir){
                if($dir[0] == '.') continue;
                $list_backend[$dir]['title'] = $dir;

                // info about template
                foreach(scandir($backend_path . DS . $dir) as $file) {
                    if($file[0] == '.') continue;

                    if($file == 'info.txt')
                    {
                        if(file_exists($filename = $backend_path . DS . $dir . DS . $file))
                        {
                            $list_backend[$dir]['info'] = file_get_contents($filename);
                        }
                    }
                }

                if(file_exists($public_backend_path = ROOT_PATH . '/public/backend/' . $dir))
                {
                    if(file_exists($image = $public_backend_path . '/img/preview.jpg')) {
                        $list_backend[$dir]['image'] = 'assets/' . $dir . '/img/preview.jpg';
                    }
                }
            }
        }

        $templates_list['backend'] = $list_backend;

        return $templates_list;
    }

    /**
     * Checks in settings whether there a class name, which will be changed here. If not, returns entered name.
     * @param $name
     * @return mixed
     */
    public static function getFormClass($name)
    {
        $form_name = '';//Setting::getSetting( self::SETTING_FORM_CLASS . '.' . $name);

        if(!empty($form_name)){
            return $form_name;
        }

        return  $name;
    }
}